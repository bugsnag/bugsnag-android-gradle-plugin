buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    ext.agpVersion = "4.2.0-beta03" // compile against 4.1, but maintain compat to 3.4.0
    ext.kotlinVersion = "1.3.72"

    dependencies {
        classpath "com.android.tools.build:gradle:$agpVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.17.1"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:9.4.1"
    }
}
// Gradle plugins
plugins {
    id "java-gradle-plugin"
    id "groovy"
    id "com.gradle.plugin-publish" version "0.12.0"
    id "com.vanniktech.maven.publish" version "0.12.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "org.jetbrains.kotlin.kapt"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

sourceSets {
    main {
        java {
            srcDir("build/generated/source/kapt/main")
        }
    }
}

// Repositories for dependencies
repositories {
    mavenCentral()
    google()
}

compileGroovy {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

// compile groovy first, see
// https://docs.gradle.org/6.1-rc-1/release-notes.html#compilation-order
tasks.named("compileGroovy") {
    classpath = sourceSets.main.compileClasspath
}

tasks.named("compileKotlin") {
    classpath += files(sourceSets.main.groovy.classesDirectory)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Several of these need to be kept as 'compile' for license checking to work
// as otherwise the downloadLicenses task misses these deps
// Build dependencies
dependencies {
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.9.3"
    compileOnly "com.android.tools.build:gradle:$agpVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // For uploading proguard/ndk files
    compile "com.squareup.okhttp3:okhttp:4.8.0"
    compile "com.squareup.retrofit2:retrofit:2.9.0"
    compile "com.squareup.retrofit2:converter-moshi:2.9.0"
    compile "com.squareup.retrofit2:converter-scalars:2.9.0"

    // For serialization of shared data
    compile "com.squareup.moshi:moshi:1.9.3"

    // For multiple I/O use cases
    compile "com.squareup.okio:okio:2.7.0"

    testImplementation "com.android.tools.build:gradle:$agpVersion"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.8.0"
    testImplementation "com.squareup.okhttp3:logging-interceptor:4.8.0"
    testImplementation "com.google.truth:truth:1.0.1"
}

// Gradle plugin publishing settings (plugins.gradle.com)
pluginBundle {
    website = POM_URL
    vcsUrl = POM_SCM_CONNECTION

    plugins {
        androidGradlePlugin {
            id = "com.bugsnag.android.gradle"
            displayName = POM_NAME
            description = POM_DESCRIPTION
            tags = ["bugsnag", "proguard", "android", "upload"]
        }
    }

    mavenCoordinates {
        groupId = GROUP
        artifactId = POM_ARTIFACT_ID
    }
}

mavenPublish {
    targets {
        sonatype {
            releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            repositoryUsername = project.hasProperty("NEXUS_USERNAME") ? "$NEXUS_USERNAME" : System.getenv("NEXUS_USERNAME")
            repositoryPassword = project.hasProperty("NEXUS_PASSWORD") ? "$NEXUS_PASSWORD" : System.getenv("NEXUS_PASSWORD")
        }
    }
}

// license checking
license {
    header rootProject.file("LICENSE")
    ignoreFailures true
}

downloadLicenses {
    dependencyConfiguration "compile"
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
}

detekt {
    input = files("src/main/kotlin")
    baseline = file("detekt-baseline.xml")
    reports {
        html {
            enabled = true
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8

// see https://github.com/asciidoctor/asciidoctorj/pull/862
Signature.metaClass.getToSignArtifact = { ->
    return (delegate as Signature).source
}
